//WAIT~~~~~~~~~~~~
//Clobbers: A, B, C, RX0, RX1.
//short argument is passed via the stack rather than a register.
//wait_ms is in RX0.
//start_ms is in RX1.
//prototype: wait(short milliseconds)

..decl_farproc(LIBC_REGION):proc_wait
..export"proc_wait"
	//	retrieve our argument and store it in RX0.
	pop %3%; alpop; push %5%; rx0a;
	//	store the start time in RX1
	clock;				rx1a;
	//loop.
	:libc_wait_looptop:
		//grab the time.
		clock;
		brx1;
		sub;
		ba;
		arx0;
		cmp;
		gt
		jne %libc_wait_loopout%
		jim %libc_wait_looptop%
	:libc_wait_loopout:
farret;

..decl_farproc(LIBC_REGION):sleep_wait
..export"sleep_wait"
	//	retrieve our argument and store it in RX0.
	//pop %3%; alpop; push %5%; rx0a;
	//	store the start time in RX1
	clock;				rx1a;
	//loop.
	:libc_sleep_wait_looptop:
		//sleep
		lla %0xDE02%
		syscall
		//grab the time.
		clock;
		brx1;
		sub;
		ba;
		arx0;
		cmp;
		gt
		jne %libc_wait_loopout%
		jim %libc_sleep_wait_looptop%
